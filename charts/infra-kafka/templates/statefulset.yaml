apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: infra
spec:
  serviceName: kafka
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: { app: kafka }
  template:
    metadata:
      labels: { app: kafka }
    spec:
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      containers:
        - name: kafka
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: broker
              containerPort: {{ .Values.service.internalPort }}
            - name: controller
              containerPort: {{ .Values.service.controllerPort }}
            - name: external
              containerPort: 9092
          env:
            - name: CLUSTER_ID
              value: "{{ .Values.clusterId }}"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:{{ .Values.service.internalPort }},CONTROLLER://:{{ .Values.service.controllerPort }},PLAINTEXT_HOST://:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://{{ .Values.advertised.internal }},PLAINTEXT_HOST://{{ .Values.advertised.external }}"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "1@kafka-0.kafka.infra.svc.cluster.local:{{ .Values.service.controllerPort }}"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
          envFrom:
            - configMapRef:
                name: kafka-config
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
            - name: secrets
              mountPath: /etc/kafka/secrets
              readOnly: true
          readinessProbe:
            tcpSocket: { port: broker }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket: { port: broker }
            initialDelaySeconds: 20
            periodSeconds: 10
      volumes:
        - name: secrets
          emptyDir: {} # plug real secrets later if needed
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
